/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import volvis.raycaster.TF2D;
import javax.swing.JOptionPane;
import volvis.raycaster.CenterSlicer;
import volvis.raycaster.Compositing;
import volvis.raycaster.Mip;
import volvis.raycaster.RaycastRenderer;

/**
 *
 * @author michel
 */
public class RaycastRendererPanel extends javax.swing.JPanel {

    public enum ValueFunction {
        TRI_LINEAR,
        ROUND_DOWN,
        NEAREST;

        static DefaultComboBoxModel<ValueFunction> getComboBox() {
            return new DefaultComboBoxModel<>(ValueFunction.values());
        }
    }

    public ValueFunction getValueFunction() {
        return (ValueFunction) jComboBox1.getSelectedItem();
    }

    private RaycastRenderer renderer = null;

    /**
     * Creates new form RaycastRendererPanel
     */
    public RaycastRendererPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        renderingSpeedLabel = new javax.swing.JLabel();
        slicerButton = new javax.swing.JRadioButton();
        mipButton = new javax.swing.JRadioButton();
        compositingButton = new javax.swing.JRadioButton();
        tf2dButton = new javax.swing.JRadioButton();
        shadingCheckbox = new javax.swing.JCheckBox();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextFieldSteps = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        actualStepsLabel = new javax.swing.JLabel();

        jLabel1.setText("Rendering time (ms):");

        renderingSpeedLabel.setText("jLabel2");

        buttonGroup1.add(slicerButton);
        slicerButton.setSelected(true);
        slicerButton.setText("Slicer");
        slicerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slicerButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(mipButton);
        mipButton.setText("MIP");
        mipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mipButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(compositingButton);
        compositingButton.setText("Compositing");
        compositingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compositingButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(tf2dButton);
        tf2dButton.setText("2D Transfer function");
        tf2dButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf2dButtonActionPerformed(evt);
            }
        });

        shadingCheckbox.setText("Volume shading");
        shadingCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shadingCheckboxActionPerformed(evt);
            }
        });

        jComboBox1.setModel(ValueFunction.getComboBox());
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextFieldSteps.setText(String.valueOf(maxSteps));
        jTextFieldSteps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStepsActionPerformed(evt);
            }
        });

        jLabel2.setText("targetSteps:");

        jLabel3.setText("actualSteps:");

        actualStepsLabel.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(renderingSpeedLabel))
                    .addComponent(tf2dButton)
                    .addComponent(shadingCheckbox)
                    .addComponent(mipButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slicerButton)
                            .addComponent(compositingButton))
                        .addGap(119, 119, 119)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(actualStepsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldSteps, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(147, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(renderingSpeedLabel))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slicerButton)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mipButton)
                    .addComponent(jTextFieldSteps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compositingButton)
                    .addComponent(jLabel3)
                    .addComponent(actualStepsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tf2dButton)
                .addGap(18, 18, 18)
                .addComponent(shadingCheckbox)
                .addContainerGap(134, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mipButtonActionPerformed
        renderer.setRendererClass(new Mip(renderer));
    }//GEN-LAST:event_mipButtonActionPerformed

    private void slicerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slicerButtonActionPerformed
        renderer.setRendererClass(new CenterSlicer(renderer));
    }//GEN-LAST:event_slicerButtonActionPerformed

    private void compositingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compositingButtonActionPerformed
        renderer.setRendererClass(new Compositing(renderer));
    }//GEN-LAST:event_compositingButtonActionPerformed

    private void tf2dButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf2dButtonActionPerformed
        renderer.setRendererClass(new TF2D(renderer));
    }//GEN-LAST:event_tf2dButtonActionPerformed

    private void shadingCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shadingCheckboxActionPerformed
        JOptionPane.showMessageDialog(this, "Not implemented.");
    }//GEN-LAST:event_shadingCheckboxActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        renderer.changed();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextFieldStepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStepsActionPerformed
        try {
            maxSteps = (int) Integer.valueOf(jTextFieldSteps.getText());
            renderer.changed();
        } catch (NumberFormatException e) {
            jTextFieldSteps.setText(String.valueOf(maxSteps));
            JOptionPane.showMessageDialog(this, "Only numbers allowed");
        }
    }//GEN-LAST:event_jTextFieldStepsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actualStepsLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton compositingButton;
    private javax.swing.JComboBox<ValueFunction> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextFieldSteps;
    private javax.swing.JRadioButton mipButton;
    private javax.swing.JLabel renderingSpeedLabel;
    private javax.swing.JCheckBox shadingCheckbox;
    private javax.swing.JRadioButton slicerButton;
    private javax.swing.JRadioButton tf2dButton;
    // End of variables declaration//GEN-END:variables

    /**
     * @param renderer the renderer to set
     */
    public void setRenderer(RaycastRenderer renderer) {
        this.renderer = renderer;
        this.renderer.setRendererClass(new Compositing(renderer));
    }
    
    private class StepEstimator {
        double falloff;
        long[] times;
        int[] steps;
        int offset = 0;
        final double msPerFrame;

        public StepEstimator() {
            int targetFPS = 15;
            final int history = 5;
            this.falloff = 0.7;
            this.times = new long[history];
            this.steps = new int[history];
            msPerFrame = 1000.0 / targetFPS;
        }
        
        int getSteps(){
            double weight = 1;
            double avgTimePerStep = 0;
            double weightSum = 0;
            for (int i = 0; i < times.length; i++) {
                int index = (offset - 1 - i + times.length) % times.length;
                if(times[index] > 0){
                    double val = ((double)times[index]) / steps[index];
                    avgTimePerStep += weight * val;
                    weightSum += weight;
                }
                weight *= this.falloff;
            }
            avgTimePerStep = (avgTimePerStep / weightSum); // s / step
            int target = (int) (msPerFrame / avgTimePerStep);
            return target;
        }
        
        void addTime(long time, int steps){
            times[offset] = time;
            this.steps[offset] = steps;
            offset = (offset + 1) % times.length;
        }

        @Override
        public String toString() {
            return getSteps() + Arrays.toString(times) + Arrays.toString(steps);
        }
        
        void reset(){
            Arrays.fill(steps, 0);
            Arrays.fill(times, 0);
        }
    }
    private StepEstimator stepEstimator = new StepEstimator();
    
    int maxSteps = 100;

    public int getMaxSteps() {
        return maxSteps;
    }

    public int getEstSteps() {
        return Math.max(5, (int)stepEstimator.getSteps());
    }

    public void setLastImageCalcTime(double lastCalcImageTime) {
        renderingSpeedLabel.setText(String.valueOf(lastCalcImageTime));
    }

    public void setLastVisualizeTime(long l, int steps) {
        stepEstimator.addTime(l, steps);
    }

    public void setActualStepsToTake(int steps) {
        actualStepsLabel.setText(String.valueOf(steps));
    }

    public void resetTimings() {
        stepEstimator.reset();
    }
}
